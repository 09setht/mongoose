doctype html
html(lang='en')
  head
    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    title Mongoose Quick Start v#{package.version}
    link(href='http://fonts.googleapis.com/css?family=Anonymous+Pro:400,700|Droid+Sans+Mono|Open+Sans:400,700|Linden+Hill|Quattrocento:400,700|News+Cycle:400,700|Antic+Slab|Cabin+Condensed:400,700', rel='stylesheet', type='text/css')
    link(href='/docs/css/default.css', rel='stylesheet', type='text/css')
    style.
      body {
        background: #d8e2d8 url(/docs/images/square_bg.png) fixed;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        color: #333;
        -webkit-font-smoothing: antialiased;
        -webkit-text-size-adjust: 100%;
        padding: 0;
        margin: 0;
        font-size: 14px;
        line-height: 22px;
      }
      a {
        color: #800;
        -webkit-transition-property: opacity, -webkit-transform, color, background-color, padding, -webkit-box-shadow;
        -webkit-transition-duration: 0.15s;
        -webkit-transition-timing-function: ease-out;
      }
      a:hover {
        opacity: 0.8;
      }
      #wrap {
      }
      h1 {
        font-family: 'Helvetica Nueue', Helvetica, Arial, FreeSans, sans-serif;
        text-rendering: geometricPrecision;
      }
      pre {
        background: rgba(255,255,255,.8);
        border: 1px solid #bbb;
        padding:5px;
        border-radius: 3px;
        box-shadow: 1px 3px 6px #ddd;
      }
      code {
        background: rgba(255,255,255,.8);
        color: #333;
        border-radius: 3px;
        font-size: 13px;
        font-family: Monaco;
        /*text-shadow: 1px 2px 2px #555;*/
      }
      pre code {
        border: 0 none;
        padding: 1.2em;
        overflow-x: auto;
      }
      h3 { padding-top: 35px; }
      h3 code {
        font-weight: normal;
      }
      hr {
        display: none;
        height: 1px;
        border: 0 none;
        padding: 0;
        margin: 90px 0;
        background: -webkit-gradient(linear, left top, right top, from(rgba(57, 172, 57, 0.0)), color-stop(0.5, rgba(57, 172, 57, 0.33)), to(rgba(57, 172, 57, 0.0)))
      }
      .doclinks hr {
        margin: 10px 0;
      }
      li {
        list-style: square;
      }
      #header {
        padding-top: 22px;
        padding-bottom: 25px;
        text-transform: lowercase;
      }
      #header h1 {
        margin-top: 0;
        margin-bottom: 0;
      }
      #header h1 a {
        text-decoration: none;
      }
      #header .mongoose {
        font-size: 50px;
        font-weight: 100;
        color: #fff;
        text-shadow: 6px 4px 5px #777, -2px 0px 2px white;
        letter-spacing: -7px;
      }
      #links {
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        width: 210px;
        overflow-x: hidden;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        padding: 15px 0 30px 20px;
        border-right: 1px solid #ddd;
        background: -webkit-gradient(linear, left top, right top, from(transparent), color-stop(0.92, transparent), color-stop(0.9201, rgba(172,172,172, 0.0)), to(rgba(172,172,172, 0.4))), transparent;
      }
      #content {
        padding: 0;
        margin: 0 0 30px 230px;
        overflow-x: hidden;
      }
      #content .controls {
        padding: 5px 15px 5px 10px;
        position: fixed;
        background: #fff;
        border: 3px solid #eee;
        border-radius: 0 0 12px 0;
        border-width: 0 3px 3px 10px;
        width: 100%;
        bottom: 0;
        opacity: 0.75;
        -webkit-transition-property: opacity;
        -webkit-transition-duration: 0.15s;
        -webkit-transition-timing-function: ease-out;
      }
      #content .controls:hover {
        opacity: .9;
      }
      #content p {
        word-wrap: break-word;
      }
      #content > ul {
        margin: 0;
        padding: 0;
      }
      .private {
        display: none;
      }
      .doclinks li.private a:before,
      .doclinks .module.private a:before,
      .doclinks item.private a:before {
        content: "p";
        background: #333;
        color: #fff;
        font-size: 11px;
        line-height: 15px;
        font-weight: normal;
        padding: 0 2px;
        border-radius: 3px;
        border: 1px solid #333;
        display: inline-block;
        margin-right: 5px;
      }
      #content .private h3:after {
        content: "private";
        background: #333;
        color: #fff;
        font-size: 11px;
        line-height: 15px;
        font-weight: normal;
        padding: 0 2px;
        border-radius: 3px;
        border: 1px solid #333;
        display: inline-block;
        margin-left: 5px;
      }
      .module {
        list-style: none;
        padding: 30px 0 30px 30px;
        border-color: #eee;
        border-width: 9px 10px;
        border-style: solid;
        background-color: #fff;
      }
      .module > * {
        max-width: 700px;
      }
      .item {
        margin-bottom: 175px;
      }
      .item h3 a {
        color: #333;
        text-decoration: none;
      }
      .property h3 span {
        color: #444;
      }
      .description {
        margin-top: 25px;
      }
      .sourcecode {
        display: none;
      }
      .showcode {
        font-size: 12px;
        cursor: pointer;
        display: none;
      }
      .load .showcode {
        display: block;
      }
      .types a {
        text-decoration: none;
      }
      @media only screen and (device-width: 768px) {

      }
      @media only screen and (max-width: 480px) {
        #forkbanner { display: none }
        #header .mongoose {
          font-size: 65px;
          text-align: center;
        }
        #links {
          position: static;
          width: auto;
          border: 0 none;
          border-right: 0 none;
          border-bottom: 1px solid #ddd;
          background: -webkit-gradient(linear, left top, left bottom, from(transparent), color-stop(0.92, transparent), color-stop(0.9201, rgba(172,172,172, 0.0)), to(rgba(172,172,172, 0.4))), transparent;
          padding: 15px 0;
        }
        #links, #links ul, #links li { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }
        #links ul { padding: 0 10px 0 0; }
        #links li {
          list-style: none;
          display: inline-block;
          width: 25%;
          text-align: center;
        }
        #links .home, #links .support, #links .fork {
          display: none;
        }
        .doclinks {
          display: none;
        }
        #content { margin-left: 0; }
        .module {
          padding-left: 5px;
          border-width: 3px;
        }
      }
  body.api
    a#forkbanner(href="http://github.com/learnboost/mongoose")
      img(style="position: absolute; top: 0; right: 0; border: 0;", src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png", alt="Fork me on GitHub")
    #links
      #header
        h1
          a(href="../index.html")
            .mongoose Mongoose
      include includes/nav
    #content
      .module
        h2 Schemas
        p
          | Everything in Mongoose starts with a Schema. If you haven't yet done so, please take a minute to read the 
          a(href="./index.html") quickstart
          |  to get an idea of how Mongoose works.
        h3 Defining your schema
        p
          | Each schema maps to a MongoDB collection and defines the shape of the documents within that collection.
        :js
          var blogSchema = new Schema({
              title:  String
            , author: String
            , body:   String
            , comments: [{ body: String, date: Date }]
            , date: { type: Date, default: Date.now }
            , hidden: Boolean
            , meta: {
                votes: Number
              , favs:  Number
            }
          })
        p
          | Each key in our 
          code blogSchema
          |  defines a property in our documents which will be cast to its associated type. Keys may also be assigned nested objects containing further key/type definitions 
          em (e.g. the `meta` property above).
          |  For example, we've defined a 
          code title
          |  which will be cast to the 
          a(href="./api.html#schema-string-js") String
          |  
          a(href="./api.html#schematype_SchemaType") SchemaType
          |  and 
          code date
          |  which will be cast to a 
          code Date
          |  SchemaType.
        p
          | The permitted SchemaTypes are 
          ul
            li String
            li Number
            li Date
            li Buffer
            li Boolean
            li Mixed
            li ObjectId
            li Array
          | Read more about them 
          a(href="./schematypes.html") here
          | .
        p
          | Schemas not only define the structure of your document and casting of properties, they also define document 
          a(href="#methods") instance methods
          |, static 
          a(href="#statics") Model methods
          |, 
          a(href="#indexes") compound indexes
          |  and document lifecycle hooks called 
          a(href="./middleware.html") middleware
          |.
        h3 Pluggable
        p
          | Schemas are 
          a(href="./plugins.html") pluggable
          |  which allows us to package up reusable features into 
          a(href="http://plugins.mongoosejs.com") plugins
          |  that can be shared with the community or just between your projects.
        h3#methods Instance methods
        p 
          | Models are just fancy 
          code constructor
          |  functions. As such they can have prototype methods inherited by their instances. In the case of Mongoose, instances are 
          code documents
          |.
        p
          | Defining an instance method is easy.
        :js
          var animalSchema = new Schema({ name: String, type: String });

          animalSchema.methods.findSimilarTypes = function (cb) {
            return this.model('Animal').find({ type: this.type }, cb);
          }

          var Animal = mongoose.model('Animal', animalSchema);
        p
          | Now all of our 
          code animal
          |  instances have a 
          code findSimilarTypes
          |  method available to it.
        :js
          var dog = new Animal({ type: 'dog' })
          dog.findSimilarTypes(function (err, dogs) {
            console.log(dogs) // woof
          })
        h3#statics Statics
        p 
          | Adding static constructor methods to Models is simple as well. Continuing with our 
          code animalSchema
          |:
        :js
          animalSchema.statics.findByName = function (name, cb) {
            this.find({ name: new RegExp(name, 'i'), cb);
          }

          var Animal = mongoose.model('Animal', animalSchema);
          Animal.findByName('fido', function (err, animals) {
            console.log(animals);
          })
        h3#indexes Indexes
        p
          a(href="http://www.mongodb.org/display/DOCS/Indexes") Indexes
          |  can be defined at the 
          a(href="./api.html#schematype_SchemaType-index") path level
          |  or the 
          code schema
          |  level. Defining indexes at the schema level is necessary when defining 
          a(href="http://www.mongodb.org/display/DOCS/Indexes#Indexes-CompoundKeys", target="_blank") compound indexes
          |.
        :js
          animalSchema.index({ name: 1, type: -1 });
        p
          | When your application starts up, Mongoose automatically calls 
          code ensureIndex
          |  for each defined index. This behavior can be disabled by setting the 
          code autoIndex
          |  option of your schema to false.
        :js
          animalSchema.set('autoIndex', false)
          // or
          new Schema({..}, { autoIndex: false })
        p
          | See also the 
          a(href="./api.html#model_Model-ensureIndexes")
            code Model#ensureIndexes
          |  method.
    script.
      document.body.className = 'load';
    include includes/googleanalytics
